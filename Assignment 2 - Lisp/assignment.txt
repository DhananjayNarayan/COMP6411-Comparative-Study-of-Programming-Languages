Problem 1:

f (0) = <0>
 f (n) = consR(f (n âˆ’ 1),n), for n > 0.

 f(4)=consR(consR(3),4)
     =consR(consR(consR(2),3),4)
     =consR(consR(consR(consR(1),2),3),4)
     =consR(consR(consR(consR(consR(0),1),2),3),4)
     =consR(consR(consR(consR((0),1),2),3),4)
     =consR(consR(consR((0,1),2),3),4)
     =consR(consR((0,1,2),3),4)
     =consR((0,1,2,3),4)
     =(0,1,2,3,4)

Problem 4 -

(b) :
dist(w,<x,y>) = cons (list (w,head(<x,y>)) (dist w (tail(<x,y>)))
                     = cons (list (w,<x>) (cons(list(w,head<y>)) (dist(w,tail(<>))))
                     = cons(<w,x> cons(<w,y>) nil))
                     =  cons (<w,x> <w,y>)
                     = (<w,x>,<w,y>)


(d):

Tracing function 4 for (dist 'a '(b c d)):
n | lst     | if (null lst)       | result->(cons (list n (car lst))
a | (b c d) | nil-> dist(a (c d)) | ((a b))
a | (c d)   | nil-> dist(a (d))   | ((a b) (a c))
a | (d)     | nil-> dist(a null)  | ((a b) (a c) (a d))
a | null    | nil                 | return result = ((a b) (a c) (a d))

Problem 7:

Tracing function 7 for (filter '(12 9 3 2 7) '4):
lst          | p  | if (lst != listp) | if (p != integerp) | ln | if (p>0 && (ln >0 && (every 'integerp lst))) | lst          | elt | if (lst == null) | if ((car lst)< elt)                --->| result-> (cons (car lst))
(12 9 3 2 7) | 4  | nil               | nil                | 5  | true -> remove-all-small ((12 9 3 2 7) 4)    | (12 9 3 2 7) | 4   | nil-> if(12<4)-->| false-> remove-all-small ((9 3 2 7) 4) | (12)
                                                                                                               | (9 3 2 7)    | 4   | nil-> if(9<4)--> | false-> remove-all-small ((3 2 7) 4)   | (12 9)
                                                                                                               | (3 2 7)      | 4   | nil-> if(3<4)--> | true-> remove-all-small ((2 7) 4)      |
                                                                                                               | (2 7)        | 4   | nil-> if(2<4)--> | true-> remove-all-small ((7) 4)        |
                                                                                                               | (7)          | 4   | nil-> if(7<4)--> | false-> remove-all-small (null 4)      | (12 9 7)
                                                                                                               | null         | 4   | nil              |                                        | return result = (12 9 7)
Problem 9:

height()=0
height(root) = max(height(node 1),height(node 2))+1


Tracing Height for Binary Tree
(40
   (30 
      (25 
         ((2) () ())
         ()
      )
      (35 () ())
    )
   (60 
      (50 () ())
      ()
   )
)

height(40) = max(height(30),height(60))+1
           = max(max(height(25),height(35))+1,max(height(50),0)+1)+1
           = max(max(max(height(2),height())+1,0)+1,max(0,0)+1)+1
           = max(max(max(max(height(),height())+1,0)+1,0)+1,max(0,0)+1)+1
           = max(max(max(1,0)+1,0)+1,1)+1
           = max(max(1,0)+1,1)+1
           = max(1+1,1)+1
           = max(2,1)+1
           = 2+1
           = 3
